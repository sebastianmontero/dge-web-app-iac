name: Rarez IaC

on:
  push:
    branches:
    - staging
    - production
  pull_request:
    branches:
    - staging
    - production
    types:
      - opened
      - edited
jobs:
  extract-branch:
    name: Determine the branch we are working on
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Extract branch name from a push event
        if: github.event_name == 'push'
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Extract branch name from a pull request event
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=${GITHUB_BASE_REF}" >> $GITHUB_ENV
      - name: Echo branch name
        run: echo $BRANCH_NAME
      - name: Output branch name
        run: echo "##[set-output name=branch;]$(echo ${BRANCH_NAME})"
        id: output-branch-name
    outputs:
      branch: ${{steps.output-branch-name.outputs.branch}}
  deploy:
    name: Deploy Rarez IaC
    needs: extract-branch
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./${{needs.extract-branch.outputs.branch}}
    steps:      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: checkout
        uses: actions/checkout@v2
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
